---
- name: Update OS package caches for Debian
  apt:
    update_cache: yes
  when: ansible_facts['os_family'] == 'Debian'
  tags:
    - backup
    - backup-update-packages
    - webserver
    - appserver
    - dbserver

- name: Update OS package caches for CentOS
  dnf:
    update_cache: yes
  when: ansible_facts['os_family'] == 'RedHat'
  tags:
    - backup
    - backup-update-packages
    - webserver
    - appserver
    - dbserver

- name: Update OS packages
  package:
    name: '*'
    state: latest
  tags:
    - backup
    - backup-update-packages
    - webserver
    - appserver
    - dbserver

# For Ubuntu
- name: Install OS packages for Debain
  package:
    name: "{{ backup_debian_install }}"
    state: latest
  when: ansible_facts['os_family'] == 'Debian'
  tags:
    - backup
    - backup-install-packages
    - webserver
    - appserver
    - dbserver

# For CentOS
- name: Install OS packages for CentOS
  package:
    name: "{{ backup_redhat_install }}"
    state: latest
  when: ansible_facts['os_family'] == 'RedHat'
  tags:
    - backup
    - backup-install-packages
    - webserver
    - appserver
    - dbserver

- name: Create backup script directory
  file:
    path: "{{ backup_script_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  tags:
    - backup
    - backup-create-backup-script-directory
    - webserver
    - appserver
    - dbserver

- name: Configure a backup script
  template:
    src: "{{ backup_script_path.lstrip('/') }}.j2"
    dest: "{{ backup_script_path }}"
    owner: root
    group: root
    mode: 0755
  tags:
    - backup
    - backup-configure-script
    - webserver
    - appserver
    - dbserver

- name: Download a dir backup script from github
  git:
    repo: "{{ dir_backup_repo }}"
    dest: "{{ dir_backup_dest }}"
    version: "{{ dir_backup_version }}"
  tags:
    - backup
    - backup-download-dir-backup-script
    - webserver
    - appserver
    - dbserver

- name: Check the dir backup script exists
  stat:
    path: "{{ dir_backup_dest.rstrip('/') }}/{{ dir_backup_name }}"
  register: dir_backup
  tags:
    - backup
    - backup-check-dir-backup-script-exists
    - webserver
    - appserver
    - dbserver

- name: Copy a dir backup script
  copy:
    remote_src: yes
    src: "{{ dir_backup_dest.rstrip('/') }}/{{ dir_backup_name }}"
    dest: "{{ dir_backup_path }}"
    owner: root
    group: root
    mode: 0755
  when: dir_backup.stat.exists
  tags:
    - backup
    - backup-copy-dir-backup-script
    - webserver
    - appserver
    - dbserver

# Reference: https://opensource.com/article/20/7/systemd-timers
- name: Create backup services
  template:
    src: "{{ item.lstrip('/') }}.j2"
    dest: "{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "{{ backup_service_path }}"
    - "{{ backup_timer_path }}"
  tags:
    - backup
    - backup-create-backup-services
    - webserver
    - appserver
    - dbserver

- name: Check backup service exists
  stat:
    path: "{{ backup_service_path }}"
  register: backup_service_path_result
  tags:
    - backup
    - backup-check-backup-service
    - webserver
    - appserver
    - dbserver

- name: Enable backup service
  systemd:
    name: "{{ backup_service_name }}"
    enabled: true
    daemon-reload: true
  when: backup_service_path_result.stat.exists
  tags:
    - backup
    - backup-enable-backup-service
    - webserver
    - appserver
    - dbserver

- name: Check backup timer exists
  stat:
    path: "{{ backup_timer_path }}"
  register: backup_timer_path_result
  tags:
    - backup
    - backup-check-backup-timer
    - webserver
    - appserver
    - dbserver

- name: Enable backup timer
  systemd:
    name: "{{ backup_timer_name }}"
    state: started
    enabled: true
    daemon-reload: true
  when: backup_timer_path_result.stat.exists
  tags:
    - backup
    - backup-enable-backup-timer
    - webserver
    - appserver
    - dbserver
